---
import "../assets/css/global.css";

import { getCollection } from "astro:content";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import Sidebar from "../components/Sidebar.astro";
const allPosts = await getCollection("posts");
const featuredPosts = allPosts.filter((item) => {
  return item.data.tags.includes("featured");
});
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Shopify Mentor</title>
  </head>
  <body>
    <div
      class="layer fixed bg-slate-950/40 w-full h-full min-h-screen backdrop-blur-sm z-10 hidden"
    >
    </div>
    <Header />
    <main class="flex space-x-16 mv-wrapper">
      <slot />
      <Sidebar posts={featuredPosts} />
    </main>
    <Footer />

    <script>
      class SearchInput extends HTMLElement {
        posts: [] | undefined;
        container: HTMLElement | null;
        heading: HTMLElement | null;
        input: HTMLInputElement | null;
        searchIcon: HTMLInputElement | null;
        closeIcon: HTMLInputElement | null;
        results: any;
        debounceTimeout: number | null; // Agregamos una variable para almacenar el tiempo de espera;
        spinner: HTMLElement | null;
        constructor() {
          super();
          this.posts = JSON.parse(`${this.dataset.posts}`);
          this.input = this.querySelector("input");
          this.container = this.querySelector(".search-container");
          this.searchIcon = this.querySelector(".search-icon");
          this.closeIcon = this.querySelector(".close-icon");
          this.heading = this.querySelector(".heading");
          this.results = this.querySelector(".results");
          this.spinner = this.querySelector(".spinner");
          this.debounceTimeout = null; // Inicializamos la variable de tiempo de espera
          const self = this;
          this.input?.addEventListener("input", function (event) {
            if (self.debounceTimeout) {
              clearTimeout(self.debounceTimeout);
            }
            self.debounceTimeout = setTimeout(() => {
              self.handleInput();
            }, 1000);
          });

          this.closeIcon?.addEventListener(
            "click",
            this.handleClose.bind(this)
          );
        }

        handleInput() {
          if (this.input?.value?.length > 2) {
            this.showResultsBox();
            const searchResults = this.posts?.filter((post) =>
              post?.data?.title.toLowerCase().includes(this.input?.value)
            );
            let template = "";
            if (searchResults && searchResults?.length > 0) {
              searchResults?.map((post) => {
                let stacks = "";
                {
                  post.data.stack.map(
                    (tech) =>
                      (stacks += `<li class="text-sm text-slate-400">${tech}</li>`)
                  );
                }
                template += `<div class='p-2 border-2 flex space-x-4 rounded border-slate-200 bg-slate-50 shrink-0'>
                  <figure class="bg-slate-500 rounded shadow overflow-hidden mb-2 max-h-[100px] flex items-center">
                  <Image src="${post.data.image.url}" loading="lazy" height=${100} width=${100} alt="${post.data.title}" class="w-[100px] h-full object-cover object-center"/>	
                  </figure>
                  <div class="py-2 ">
                      <h3 class='text-lg font-semibold'>
                        <a href="/posts/${post.slug}" class="text-slate-800 border-b-2 border-transparent hover:border-slate-950 hover:text-950 cursor-pointer transition-all duration-300">"${post.data.title}"</a></h3>
                      <div class="flex justify-between mb-2">
                      <ul class="flex space-x-2 ">
                          ${stacks}
                      </ul>
                      </div> 
                  </div>
              </div>`;
              });
            } else {
              template = `<p>No hay resultados</p>`;
            }
            this.showResultsContent(true, template);
            return;
          }
          this.showResultsContent(false, "");
          return;
        }
        handleClose() {
          if (this.input) {
            this.input.value = "";
            this.spinner?.classList.remove("hidden");
            this.results.innerHTML = '';
            setTimeout(() => {
              this.classList.remove("z-10");
            document.querySelector(".layer")?.classList.add("hidden");
              this.container?.classList.add("hidden");
              this.searchIcon?.classList.remove("hidden");
          this.closeIcon?.classList.add("hidden");
              this.results?.classList.add("hidden");
              this.input?.blur();
              
            }, 500);
          }
        }

        showResultsBox() {
          this.spinner?.classList.remove("hidden");
          this.heading?.classList.remove("hidden");
          this.container?.classList.remove("hidden");
          this.searchIcon?.classList.add("hidden");
          this.closeIcon?.classList.remove("hidden");
        }

        showResultsContent(inputValueLength: boolean, template: string) {
          if (inputValueLength) {
            document.querySelector(".layer")?.classList.remove("hidden");
            this.classList.add("z-10");
            setTimeout(() => {
              this.spinner?.classList.add("hidden");
              this.results?.classList.remove("hidden");
              this.results.innerHTML = template;
            }, 700);
          } else {
            this.classList.remove("z-10");
            document.querySelector(".layer")?.classList.add("hidden");
            setTimeout(() => {
              this.container?.classList.add("hidden");
              this.spinner?.classList.remove("hidden");
              this.results?.classList.add("hidden");
              this.results.innerHTML = template;
            }, 700);
          }
        }
      }
      customElements.define("search-input", SearchInput);
    </script>
  </body>
</html>
